apply plugin: 'cpp'
apply plugin: 'google-test'

import org.apache.tools.ant.taskdefs.condition.Os

// This rather ugly bit of code disables googletest for the command_line executable.
// I don't want to run tests against it with googletest.
tasks.whenTaskAdded {task ->
    if (Os.isFamily(Os.FAMILY_WINDOWS)
        || task.name.contains("Command_lineTestGoogleTest")
        || task.name.contains("Parser_apiTestGoogleTest")
        || task.name.contains("Parser_api_default_implTest")
        || task.name.contains("Parser_impl_ungerTest")) {
        task.enabled = false
    }
}

model {
    platforms {
        x64 {
            architecture "x86_64"
        }
    }

    toolChains {
        gcc(Gcc) {
            path "/usr/local/bin"
            eachPlatform {
                cCompiler.executable = "gcc-8.2.0"
                cppCompiler.executable = "g++-8.2.0"
                linker.executable = "g++-8.2.0"
                staticLibArchiver.executable = "gcc-ar-8.2.0"
            }
        }
        visualCpp(VisualCpp) {
        }
    }

    binaries {
        all {
            if (toolChain in Gcc) {
                // The -g flag adds debug symbols for gdb
                cppCompiler.args '-Wall', '-std=c++17', '-g'
                linker.args '-L/usr/local/lib'
            }
        }

        withType(GoogleTestTestSuiteBinarySpec) {
            lib library: "googleTest", linkage: "static"

            // Link all the eup libraries to every test.
            // This is inefficient but I can't find documentation for how configure dependencies for a single test.
            lib library: "grammar_parser", linkage: "static"
            lib library: "grammar_model", linkage: "static"
            lib library: "reason", linkage: "static"
            lib library: "grammar_utilities", linkage: "static"

            if (targetPlatform.operatingSystem.linux) {
                cppCompiler.args '-pthread'
                linker.args '-pthread'
            }
        }
    }

    components {
        grammar_parser(NativeLibrarySpec) {
            targetPlatform "x64"
        }
        grammar_model(NativeLibrarySpec) {
            targetPlatform "x64"
        }
        grammar_utilities(NativeLibrarySpec) {
            targetPlatform "x64"
        }
        parser_api(NativeLibrarySpec) {
            targetPlatform "x64"
        }
        parser_api_default_impl(NativeLibrarySpec) {
            targetPlatform "x64"
        }
        parser_impl_unger(NativeLibrarySpec) {
            targetPlatform "x64"
        }
        reason(NativeLibrarySpec) {
            targetPlatform "x64"
        }
        command_line(NativeExecutableSpec) {
            targetPlatform "x64"

            sources {
                cpp.lib library: "grammar_parser", linkage: "static"
                cpp.lib library: "grammar_model", linkage: "static"
                cpp.lib library: "reason", linkage: "static"
                cpp.lib library: "grammar_utilities", linkage: "static"
                cpp.lib library: "parser_api", linkage: "static"
                cpp.lib library: "parser_api_default_impl", linkage: "static"
                cpp.lib library: "parser_impl_unger", linkage: "static"
            }
        }
    }

    // For setup instructions see here https://guides.gradle.org/building-cpp-libraries/
    repositories {
        libs(PrebuiltLibraries) {
            googleTest { 
                headers.srcDir new File(projectDir, "/gtest-1.8.0/include")
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file(projectDir.getPath() + "/gtest-1.8.0/libgtest.a") 
                }
            }
        }
    }
}
